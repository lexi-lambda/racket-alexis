#lang scribble/manual

@(require (for-label racket/base
                     racket/contract/base
                     struct-updaters
                     (submod struct-updaters get-struct-accessors)
                     racket/struct-info)
          scribble/eval)

@title{Purely Functional Struct Updaters}

@defmodule[struct-updaters]

@(define struct-evaluator
   ((make-eval-factory #:lang 'racket/base
                       '(struct-updaters))))

Racket provides @racket[hash-set] and @racket[hash-update] as purely functional ways to modify
hashtables without mutation. This provides similar functionality for structures.

@defform[(define-struct-updaters struct-id)]{
Given the name of a struct via @racket[struct-id], this form generates functional setter and updater
functions for each field of the struct. Functions are only generated for the non-inherited fields for
the provided struct; a supertype's fields are ignored.

Two functions are generated for each field. Their names are generated by appending @racket[-set] and
@racket[-update] onto each of the accessor functions, and they are unhygienically introduced with the
lexical context of @racket[struct-id]. Each setter function is of the type
@racket[(-> struct-id? any/c struct-id?)]. Each updater function is of the type
@racket[(-> struct-id? (-> any/c any/c) struct-id?)]. The generated functions have contracts attached
to them which ensure that the proper values are recieved.

@(examples
  #:eval struct-evaluator
  (struct point (x y) #:transparent)
  (define-struct-updaters point)
  (point-x-set (point 1 2) 10)
  (point-y-update (point 1 2) add1))}

@defform[(struct-updaters-out struct-id)]{
This is a @tech[#:doc '(lib "scribblings/reference/reference.scrbl")]{provide transformer} that serves
as a simple way to provide the setters and updaters generated via @racket[define-struct-updaters].}

@defform[(struct+updaters-out struct-id)]{
This is a shorthand for providing both @racket[(struct-out struct-id)] and
@racket[(struct-updaters-out struct-id)].}

@section{Extracting struct accessors}

@defmodule[(submod struct-updaters get-struct-accessors)]

@defproc[(get-struct-accessors [struct-info (and/c struct-info? list?)] [failure-context syntax?])
         (values (listof identifier?) (listof identifier?))]{
Extracts the fields belonging to a struct, not including its supertypes. The first value returned
includes all accessors, the second value is just the struct's fields.

This function is provided @racket[for-syntax].}

